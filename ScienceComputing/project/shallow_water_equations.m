% run initialization init% main algorithmwhile t<T  fprintf("range H: \n");  max(max(H))  min(min(H))  fprintf("range U: \n");  max(max(U))  min(min(U))  fprintf("range V: \n");  max(max(V))  min(min(V))    % plot H    figure(1);  mesh(H);  title(['t = ' num2str(t)])  figure(2);  mesh(U);  figure(3);  mesh(V);    % spatial discretization     [dHx dHy] = get_differential_2D(H,hx,hy);  [dUx dUy] = get_differential_2D(U,hx,hy);  [dVx dVy] = get_differential_2D(V,hx,hy);    % time intergration    FU = f.*V - U.*dUx - V.*dUy - g.*dHx;  FV = -f.*U - U.*dVx - V.*dVy - g.*dHy;  FH = -U.*dHx - H.*dUx - V.*dHy - H.*dVy;    % FU = f.*V - g.*dHx;  % FV = - f.*U - g.*dHy;  % FH = - H0.*dUx - H0.*dVy;  % update value     U = U + FU.*ht;  V = V + FV.*ht;  H = H + FH.*ht;    % time step       t  t = t + ht;  pause(2);  endwhile