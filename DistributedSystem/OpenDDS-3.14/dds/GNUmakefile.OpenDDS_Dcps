# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.OpenDDS_Dcps
#
# $Id$
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.OpenDDS_Dcps
DEPENDENCY_FILE  = .depend.OpenDDS_Dcps

IDL_DEPENDENCY_FILE1 = .depend.OpenDDS_Dcps_Idl1
IDL_DEPENDENCY_FILE2 = .depend.OpenDDS_Dcps_Idl2
IDL_DEPENDENCY_FILE3 = .depend.OpenDDS_Dcps_Idl3
IDL_DEPENDENCY_FILE4 = .depend.OpenDDS_Dcps_Idl4
IDL_DEPENDENCY_FILE5 = .depend.OpenDDS_Dcps_Idl5
IDL_DEPENDENCY_FILE6 = .depend.OpenDDS_Dcps_Idl6
IDL_DEPENDENCY_FILE7 = .depend.OpenDDS_Dcps_Idl7
IDL_DEPENDENCY_FILE8 = .depend.OpenDDS_Dcps_Idl8
IDL_DEPENDENCY_FILE9 = .depend.OpenDDS_Dcps_Idl9
IDL_DEPENDENCY_FILE10 = .depend.OpenDDS_Dcps_Idl10
IDL_DEPENDENCY_FILE11 = .depend.OpenDDS_Dcps_Idl11
IDL_DEPENDENCY_FILE12 = .depend.OpenDDS_Dcps_Idl12
IDL_DEPENDENCY_FILE13 = .depend.OpenDDS_Dcps_Idl13
IDL_DEPENDENCY_FILE14 = .depend.OpenDDS_Dcps_Idl14
IDL_DEPENDENCY_FILE15 = .depend.OpenDDS_Dcps_Idl15
IDL_DEPENDENCY_FILE16 = .depend.OpenDDS_Dcps_Idl16
IDL_DEPENDENCY_FILE17 = .depend.OpenDDS_Dcps_Idl17
IDL_DEPENDENCY_FILE18 = .depend.OpenDDS_Dcps_Idl18

IDL_DEPENDENCY_FILES += \
	.depend.OpenDDS_Dcps_Idl1 \
	.depend.OpenDDS_Dcps_Idl2 \
	.depend.OpenDDS_Dcps_Idl3 \
	.depend.OpenDDS_Dcps_Idl4 \
	.depend.OpenDDS_Dcps_Idl5 \
	.depend.OpenDDS_Dcps_Idl6 \
	.depend.OpenDDS_Dcps_Idl7 \
	.depend.OpenDDS_Dcps_Idl8 \
	.depend.OpenDDS_Dcps_Idl9 \
	.depend.OpenDDS_Dcps_Idl10 \
	.depend.OpenDDS_Dcps_Idl11 \
	.depend.OpenDDS_Dcps_Idl12 \
	.depend.OpenDDS_Dcps_Idl13 \
	.depend.OpenDDS_Dcps_Idl14 \
	.depend.OpenDDS_Dcps_Idl15 \
	.depend.OpenDDS_Dcps_Idl16 \
	.depend.OpenDDS_Dcps_Idl17 \
	.depend.OpenDDS_Dcps_Idl18

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)OpenDDS_Dcps.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)OpenDDS_Dcps

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)OpenDDS_Dcps.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  DdsDcpsGuidC.cpp \
  DdsDcpsCoreC.cpp \
  DdsDcpsInfoUtilsC.cpp \
  DdsDcpsConditionSeqC.cpp \
  DdsDcpsDataReaderSeqC.cpp \
  DdsSecurityParamsC.cpp \
  DdsSecurityCoreC.cpp \
  DdsDcpsGuidTypeSupportC.cpp \
  DdsDcpsCoreTypeSupportC.cpp \
  DdsDcpsInfrastructureTypeSupportC.cpp \
  DdsDcpsC.cpp \
  DdsDcpsDomainC.cpp \
  DdsDcpsInfrastructureC.cpp \
  DdsDcpsPublicationC.cpp \
  DdsDcpsSubscriptionC.cpp \
  DdsDcpsSubscriptionExtC.cpp \
  DdsDcpsTopicC.cpp \
  DdsDcpsTypeSupportExtC.cpp \
  DdsDcpsGuidTypeSupportImpl.cpp \
  DdsDcpsCoreTypeSupportImpl.cpp \
  DdsDcpsInfrastructureTypeSupportImpl.cpp \
  DdsDcpsInfoUtilsTypeSupportImpl.cpp \
  DdsSecurityParamsTypeSupportImpl.cpp \
  DdsSecurityCoreTypeSupportImpl.cpp \
  CorbaSeq/BooleanSeqTypeSupportImpl.cpp \
  CorbaSeq/CharSeqTypeSupportImpl.cpp \
  CorbaSeq/DoubleSeqTypeSupportImpl.cpp \
  CorbaSeq/FloatSeqTypeSupportImpl.cpp \
  CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp \
  CorbaSeq/LongLongSeqTypeSupportImpl.cpp \
  CorbaSeq/LongSeqTypeSupportImpl.cpp \
  CorbaSeq/OctetSeqTypeSupportImpl.cpp \
  CorbaSeq/ShortSeqTypeSupportImpl.cpp \
  CorbaSeq/StringSeqTypeSupportImpl.cpp \
  CorbaSeq/ULongLongSeqTypeSupportImpl.cpp \
  CorbaSeq/ULongSeqTypeSupportImpl.cpp \
  CorbaSeq/UShortSeqTypeSupportImpl.cpp \
  CorbaSeq/WCharSeqTypeSupportImpl.cpp \
  CorbaSeq/WStringSeqTypeSupportImpl.cpp \
  DCPS/SendStateDataSampleList.cpp \
  DCPS/ConfigUtils.cpp \
  DCPS/ContentFilteredTopicImpl.cpp \
  DCPS/Replayer.cpp \
  DCPS/FilterEvaluator.cpp \
  DCPS/MonitorFactory.cpp \
  DCPS/MultiTopicImpl.cpp \
  DCPS/FileSystemStorage.cpp \
  DCPS/RawDataSample.cpp \
  DCPS/CoherentChangeControl.cpp \
  DCPS/MessageTracker.cpp \
  DCPS/TimeDuration.cpp \
  DCPS/BuiltInTopicUtils.cpp \
  DCPS/TopicImpl.cpp \
  DCPS/GuidBuilder.cpp \
  DCPS/BitPubListenerImpl.cpp \
  DCPS/Marked_Default_Qos.cpp \
  DCPS/StatusConditionImpl.cpp \
  DCPS/WriterInfo.cpp \
  DCPS/GuidUtils.cpp \
  DCPS/ConditionImpl.cpp \
  DCPS/RecorderImpl.cpp \
  DCPS/Discovery.cpp \
  DCPS/GuidConverter.cpp \
  DCPS/ReadConditionImpl.cpp \
  DCPS/LinuxNetworkConfigMonitor.cpp \
  DCPS/OwnershipManager.cpp \
  DCPS/RequestedDeadlineWatchdog.cpp \
  DCPS/DataSampleElement.cpp \
  DCPS/RepoIdBuilder.cpp \
  DCPS/SubscriberImpl.cpp \
  DCPS/QueryConditionImpl.cpp \
  DCPS/EntityImpl.cpp \
  DCPS/WriteDataContainer.cpp \
  DCPS/TopicDescriptionImpl.cpp \
  DCPS/Qos_Helper.cpp \
  DCPS/WaitSet.cpp \
  DCPS/DataReaderImpl.cpp \
  DCPS/SafetyProfilePool.cpp \
  DCPS/MultiTopicDataReaderBase.cpp \
  DCPS/ReactorInterceptor.cpp \
  DCPS/Watchdog.cpp \
  DCPS/WriterDataSampleList.cpp \
  DCPS/DomainParticipantImpl.cpp \
  DCPS/ReceivedDataElementList.cpp \
  DCPS/InstanceState.cpp \
  DCPS/Service_Participant.cpp \
  DCPS/ReplayerImpl.cpp \
  DCPS/DataSampleHeader.cpp \
  DCPS/GroupRakeData.cpp \
  DCPS/debug.cpp \
  DCPS/ReactorTask.cpp \
  DCPS/NetworkConfigMonitor.cpp \
  DCPS/InstanceHandle.cpp \
  DCPS/InstanceDataSampleList.cpp \
  DCPS/GuardCondition.cpp \
  DCPS/TypeSupportImpl.cpp \
  DCPS/RepoIdGenerator.cpp \
  DCPS/OfferedDeadlineWatchdog.cpp \
  DCPS/PublisherImpl.cpp \
  DCPS/StaticDiscovery.cpp \
  DCPS/DisjointSequence.cpp \
  DCPS/MemoryPool.cpp \
  DCPS/DCPS_Utils.cpp \
  DCPS/Serializer.cpp \
  DCPS/ReceivedDataStrategy.cpp \
  DCPS/Transient_Kludge.cpp \
  DCPS/Registered_Data_Types.cpp \
  DCPS/NetworkConfigModifier.cpp \
  DCPS/Time_Helper.cpp \
  DCPS/DomainParticipantFactoryImpl.cpp \
  DCPS/SafetyProfileStreams.cpp \
  DCPS/DataDurabilityCache.cpp \
  DCPS/DataWriterImpl.cpp \
  DCPS/Recorder.cpp \
  DCPS/RepoIdConverter.cpp \
  DCPS/transport/framework/DataLink.cpp \
  DCPS/transport/framework/DirectPriorityMapper.cpp \
  DCPS/transport/framework/TransportHeader.cpp \
  DCPS/transport/framework/RemoveAllVisitor.cpp \
  DCPS/transport/framework/ThreadPerConnectionSendTask.cpp \
  DCPS/transport/framework/TransportImpl.cpp \
  DCPS/transport/framework/DataLinkCleanupTask.cpp \
  DCPS/transport/framework/CopyChainVisitor.cpp \
  DCPS/transport/framework/NullSynchStrategy.cpp \
  DCPS/transport/framework/PoolSynchStrategy.cpp \
  DCPS/transport/framework/ThreadSynchResource.cpp \
  DCPS/transport/framework/ThreadSynchWorker.cpp \
  DCPS/transport/framework/PerConnectionSynch.cpp \
  DCPS/transport/framework/TransportSendBuffer.cpp \
  DCPS/transport/framework/ReceiveListenerSetMap.cpp \
  DCPS/transport/framework/TransportInst.cpp \
  DCPS/transport/framework/NetworkAddress.cpp \
  DCPS/transport/framework/NullSynch.cpp \
  DCPS/transport/framework/ThreadSynch.cpp \
  DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp \
  DCPS/transport/framework/TransportCustomizedElement.cpp \
  DCPS/transport/framework/TransportReplacedElement.cpp \
  DCPS/transport/framework/TransportSendStrategy.cpp \
  DCPS/transport/framework/TransportDebug.cpp \
  DCPS/transport/framework/TransportReassembly.cpp \
  DCPS/transport/framework/TransportSendListener.cpp \
  DCPS/transport/framework/DataLinkSet.cpp \
  DCPS/transport/framework/ReactorSynchStrategy.cpp \
  DCPS/transport/framework/TransportRetainedElement.cpp \
  DCPS/transport/framework/TransportClient.cpp \
  DCPS/transport/framework/ReceivedDataSample.cpp \
  DCPS/transport/framework/PriorityKey.cpp \
  DCPS/transport/framework/ThreadSynchStrategy.cpp \
  DCPS/transport/framework/QueueRemoveVisitor.cpp \
  DCPS/transport/framework/ReactorSynch.cpp \
  DCPS/transport/framework/SendResponseListener.cpp \
  DCPS/transport/framework/TransportType.cpp \
  DCPS/transport/framework/PerConnectionSynchStrategy.cpp \
  DCPS/transport/framework/ScheduleOutputHandler.cpp \
  DCPS/transport/framework/TransportStrategy.cpp \
  DCPS/transport/framework/PoolSynch.cpp \
  DCPS/transport/framework/TransportControlElement.cpp \
  DCPS/transport/framework/TransportRegistry.cpp \
  DCPS/transport/framework/BuildChainVisitor.cpp \
  DCPS/transport/framework/ReceiveListenerSet.cpp \
  DCPS/transport/framework/TransportQueueElement.cpp \
  DCPS/transport/framework/TransportSendControlElement.cpp \
  DCPS/transport/framework/TransportReceiveListener.cpp \
  DCPS/transport/framework/TransportSendElement.cpp \
  DCPS/transport/framework/PacketRemoveVisitor.cpp \
  DCPS/transport/framework/PriorityMapper.cpp \
  DCPS/transport/framework/TransportConfig.cpp \
  DCPS/security/framework/SecurityPluginInst.cpp \
  DCPS/security/framework/SecurityRegistry.cpp \
  DCPS/security/framework/SecurityConfig.cpp

IDL_DEPS_FLAGS1 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS1 = DdsDcpsGuid.idl

IDL_DEPS_FLAGS2 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS2 = DdsDcpsCore.idl

IDL_DEPS_FLAGS3 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS3 = DdsDcpsInfoUtils.idl

IDL_DEPS_FLAGS4 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS4 = DdsDcpsConditionSeq.idl

IDL_DEPS_FLAGS5 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS5 = DdsDcpsDataReaderSeq.idl

IDL_DEPS_FLAGS6 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS6 = DdsSecurityParams.idl

IDL_DEPS_FLAGS7 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS7 = DdsSecurityCore.idl

IDL_DEPS_FLAGS8 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS8 = DdsDcpsGuidTypeSupport.idl

IDL_DEPS_FLAGS9 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS9 = DdsDcpsCoreTypeSupport.idl

IDL_DEPS_FLAGS10 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS10 = DdsDcpsInfrastructureTypeSupport.idl

IDL_DEPS_FLAGS11 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS11 = DdsDcps.idl

IDL_DEPS_FLAGS12 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS12 = DdsDcpsDomain.idl

IDL_DEPS_FLAGS13 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS13 = DdsDcpsInfrastructure.idl

IDL_DEPS_FLAGS14 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS14 = DdsDcpsPublication.idl

IDL_DEPS_FLAGS15 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS15 = DdsDcpsSubscription.idl

IDL_DEPS_FLAGS16 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS16 = DdsDcpsSubscriptionExt.idl

IDL_DEPS_FLAGS17 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS17 = DdsDcpsTopic.idl

IDL_DEPS_FLAGS18 = $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I..
IDL_DEPS18 = DdsDcpsTypeSupportExt.idl


VPATH = .:CorbaSeq:DCPS/security/framework:DCPS/transport/framework:DCPS


LIBPATHS := . "$(ACE_ROOT)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_PortableServer -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  OpenDDS_DCPS.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG).. \
        $(RC_INCLUDE_FLAG)../dds
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/OpenDDS_Dcps
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_PortableServer TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_PortableServer TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU

ACE_PCH_SOURCE = DCPS/DdsDcps_pch.cpp
ACE_PCH_FILE   = DdsDcps_pch.h.gch

ifeq ($(pchsupport),1)
CPPFLAGS += -DUSING_PCH

$(addprefix $(VDIR), $(OBJS)): $(VDIR)$(ACE_PCH_FILE)
$(VSHOBJS): $(VSHDIR)$(ACE_PCH_FILE)
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I.. -I../dds
CPPFLAGS     += -DNOMINMAX
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DOPENDDS_DCPS_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
.PHONY: lib_warning
lib_warning:
	@echo OpenDDS_Dcps will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h DdsDcpsGuidC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h DdsDcpsGuidC.cpp: DdsDcpsGuid.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsGuid.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h DdsDcpsGuidC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsCoreC.inl DdsDcpsCoreC.h DdsDcpsCoreS.h DdsDcpsCoreC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsCoreC.inl DdsDcpsCoreC.h DdsDcpsCoreS.h DdsDcpsCoreC.cpp: DdsDcpsCore.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsCore.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsCoreC.inl DdsDcpsCoreC.h DdsDcpsCoreS.h DdsDcpsCoreC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h DdsDcpsInfoUtilsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h DdsDcpsInfoUtilsC.cpp: DdsDcpsInfoUtils.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsInfoUtils.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h DdsDcpsInfoUtilsC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsConditionSeqC.inl DdsDcpsConditionSeqC.h DdsDcpsConditionSeqS.h DdsDcpsConditionSeqC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsConditionSeq.idl" -nt "DdsDcpsConditionSeqC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsConditionSeq.idl" -nt "DdsDcpsConditionSeqC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsConditionSeq.idl" -nt "DdsDcpsConditionSeqS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsConditionSeq.idl" -nt "DdsDcpsConditionSeqC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsConditionSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsConditionSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsConditionSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsConditionSeqC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsConditionSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsConditionSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsConditionSeqC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsConditionSeqC.inl DdsDcpsConditionSeqC.h DdsDcpsConditionSeqS.h DdsDcpsConditionSeqC.cpp: DdsDcpsConditionSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsConditionSeq.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsConditionSeqC.inl DdsDcpsConditionSeqC.h DdsDcpsConditionSeqS.h DdsDcpsConditionSeqC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsDataReaderSeqC.inl DdsDcpsDataReaderSeqC.h DdsDcpsDataReaderSeqS.h DdsDcpsDataReaderSeqC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsDataReaderSeq.idl" -nt "DdsDcpsDataReaderSeqC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsDataReaderSeq.idl" -nt "DdsDcpsDataReaderSeqC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsDataReaderSeq.idl" -nt "DdsDcpsDataReaderSeqS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsDataReaderSeq.idl" -nt "DdsDcpsDataReaderSeqC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDataReaderSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDataReaderSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDataReaderSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDataReaderSeqC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDataReaderSeqC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsDataReaderSeqC.inl DdsDcpsDataReaderSeqC.h DdsDcpsDataReaderSeqS.h DdsDcpsDataReaderSeqC.cpp: DdsDcpsDataReaderSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsDataReaderSeq.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsDataReaderSeqC.inl DdsDcpsDataReaderSeqC.h DdsDcpsDataReaderSeqS.h DdsDcpsDataReaderSeqC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsSecurityParamsC.inl DdsSecurityParamsC.h DdsSecurityParamsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsSecurityParams.idl" -nt "DdsSecurityParamsC.inl" 2> /dev/null || $(TEST_EXE) "DdsSecurityParams.idl" -nt "DdsSecurityParamsC.h" 2> /dev/null || $(TEST_EXE) "DdsSecurityParams.idl" -nt "DdsSecurityParamsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityParamsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityParamsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityParamsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityParamsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityParamsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityParamsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityParamsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityParamsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityParamsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsSecurityParamsC.inl DdsSecurityParamsC.h DdsSecurityParamsC.cpp: DdsSecurityParams.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsSecurityParams.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsSecurityParamsC.inl DdsSecurityParamsC.h DdsSecurityParamsC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsSecurityCoreC.inl DdsSecurityCoreC.h DdsSecurityCoreC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsSecurityCore.idl" -nt "DdsSecurityCoreC.inl" 2> /dev/null || $(TEST_EXE) "DdsSecurityCore.idl" -nt "DdsSecurityCoreC.h" 2> /dev/null || $(TEST_EXE) "DdsSecurityCore.idl" -nt "DdsSecurityCoreC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsSecurityCoreC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsSecurityCoreC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityCoreC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityCoreC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsSecurityCoreC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsSecurityCoreC.inl DdsSecurityCoreC.h DdsSecurityCoreC.cpp: DdsSecurityCore.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsSecurityCore.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsSecurityCoreC.inl DdsSecurityCoreC.h DdsSecurityCoreC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsGuidTypeSupportC.inl DdsDcpsGuidTypeSupportC.h DdsDcpsGuidTypeSupportS.h DdsDcpsGuidTypeSupportC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsGuidTypeSupport.idl" -nt "DdsDcpsGuidTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuidTypeSupport.idl" -nt "DdsDcpsGuidTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuidTypeSupport.idl" -nt "DdsDcpsGuidTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuidTypeSupport.idl" -nt "DdsDcpsGuidTypeSupportC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidTypeSupportC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsGuidTypeSupportC.inl DdsDcpsGuidTypeSupportC.h DdsDcpsGuidTypeSupportS.h DdsDcpsGuidTypeSupportC.cpp: DdsDcpsGuidTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsGuidTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsGuidTypeSupportC.inl DdsDcpsGuidTypeSupportC.h DdsDcpsGuidTypeSupportS.h DdsDcpsGuidTypeSupportC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsCoreTypeSupportC.inl DdsDcpsCoreTypeSupportC.h DdsDcpsCoreTypeSupportS.h DdsDcpsCoreTypeSupportC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsCoreTypeSupport.idl" -nt "DdsDcpsCoreTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsCoreTypeSupport.idl" -nt "DdsDcpsCoreTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsCoreTypeSupport.idl" -nt "DdsDcpsCoreTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsCoreTypeSupport.idl" -nt "DdsDcpsCoreTypeSupportC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsCoreTypeSupportC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsCoreTypeSupportC.inl DdsDcpsCoreTypeSupportC.h DdsDcpsCoreTypeSupportS.h DdsDcpsCoreTypeSupportC.cpp: DdsDcpsCoreTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsCoreTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsCoreTypeSupportC.inl DdsDcpsCoreTypeSupportC.h DdsDcpsCoreTypeSupportS.h DdsDcpsCoreTypeSupportC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h DdsDcpsInfrastructureTypeSupportC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h DdsDcpsInfrastructureTypeSupportC.cpp: DdsDcpsInfrastructureTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsInfrastructureTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h DdsDcpsInfrastructureTypeSupportC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h DdsDcpsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h DdsDcpsC.cpp: DdsDcps.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcps.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h DdsDcpsC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h DdsDcpsDomainC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h DdsDcpsDomainC.cpp: DdsDcpsDomain.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsDomain.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h DdsDcpsDomainC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h DdsDcpsInfrastructureC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h DdsDcpsInfrastructureC.cpp: DdsDcpsInfrastructure.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsInfrastructure.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h DdsDcpsInfrastructureC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h DdsDcpsPublicationC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h DdsDcpsPublicationC.cpp: DdsDcpsPublication.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsPublication.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h DdsDcpsPublicationC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h DdsDcpsSubscriptionC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h DdsDcpsSubscriptionC.cpp: DdsDcpsSubscription.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsSubscription.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h DdsDcpsSubscriptionC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h DdsDcpsSubscriptionExtC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h DdsDcpsSubscriptionExtC.cpp: DdsDcpsSubscriptionExt.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsSubscriptionExt.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h DdsDcpsSubscriptionExtC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h DdsDcpsTopicC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h DdsDcpsTopicC.cpp: DdsDcpsTopic.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsTopic.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h DdsDcpsTopicC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h DdsDcpsTypeSupportExtC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h DdsDcpsTypeSupportExtC.cpp: DdsDcpsTypeSupportExt.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) --idl-version 4 --unknown-annotations ignore -Sa -St -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_include=dds/Versioned_Namespace.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsTypeSupportExt.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h DdsDcpsTypeSupportExtC.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += DdsDcpsGuidTypeSupport.idl DdsDcpsGuidTypeSupportImpl.h DdsDcpsGuidTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsGuidTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsGuidTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsGuidTypeSupport.idl DdsDcpsGuidTypeSupportImpl.h DdsDcpsGuidTypeSupportImpl.cpp: DdsDcpsGuid.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME DdsDcpsGuid.idl


GENERATED_DIRTY += DdsDcpsCoreTypeSupport.idl DdsDcpsCoreTypeSupportImpl.h DdsDcpsCoreTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsCore.idl" -nt "DdsDcpsCoreTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsCoreTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsCoreTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsCoreTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsCoreTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsCoreTypeSupport.idl DdsDcpsCoreTypeSupportImpl.h DdsDcpsCoreTypeSupportImpl.cpp: DdsDcpsCore.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME DdsDcpsCore.idl


GENERATED_DIRTY += DdsDcpsInfrastructureTypeSupport.idl DdsDcpsInfrastructureTypeSupportImpl.h DdsDcpsInfrastructureTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureTypeSupport.idl DdsDcpsInfrastructureTypeSupportImpl.h DdsDcpsInfrastructureTypeSupportImpl.cpp: DdsDcpsInfrastructure.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME DdsDcpsInfrastructure.idl


GENERATED_DIRTY += DdsDcpsInfoUtilsTypeSupportImpl.h DdsDcpsInfoUtilsTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfoUtilsTypeSupportImpl.h DdsDcpsInfoUtilsTypeSupportImpl.cpp: DdsDcpsInfoUtils.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -SI DdsDcpsInfoUtils.idl


GENERATED_DIRTY += DdsSecurityParamsTypeSupportImpl.h DdsSecurityParamsTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsSecurityParams.idl" -nt "DdsSecurityParamsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsSecurityParams.idl" -nt "DdsSecurityParamsTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsSecurityParamsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsSecurityParamsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsSecurityParamsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsSecurityParamsTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsSecurityParamsTypeSupportImpl.h DdsSecurityParamsTypeSupportImpl.cpp: DdsSecurityParams.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -SI DdsSecurityParams.idl


GENERATED_DIRTY += DdsSecurityCoreTypeSupportImpl.h DdsSecurityCoreTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsSecurityCore.idl" -nt "DdsSecurityCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "DdsSecurityCore.idl" -nt "DdsSecurityCoreTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsSecurityCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "DdsSecurityCoreTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsSecurityCoreTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsSecurityCoreTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsSecurityCoreTypeSupportImpl.h DdsSecurityCoreTypeSupportImpl.cpp: DdsSecurityCore.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -SI DdsSecurityCore.idl


GENERATED_DIRTY += CorbaSeq/BooleanSeqTypeSupportImpl.h CorbaSeq/BooleanSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/BooleanSeq.idl" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/BooleanSeq.idl" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/BooleanSeqTypeSupportImpl.h CorbaSeq/BooleanSeqTypeSupportImpl.cpp: CorbaSeq/BooleanSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/BooleanSeq.idl


GENERATED_DIRTY += CorbaSeq/CharSeqTypeSupportImpl.h CorbaSeq/CharSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/CharSeq.idl" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/CharSeq.idl" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/CharSeqTypeSupportImpl.h CorbaSeq/CharSeqTypeSupportImpl.cpp: CorbaSeq/CharSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/CharSeq.idl


GENERATED_DIRTY += CorbaSeq/DoubleSeqTypeSupportImpl.h CorbaSeq/DoubleSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/DoubleSeq.idl" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/DoubleSeq.idl" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/DoubleSeqTypeSupportImpl.h CorbaSeq/DoubleSeqTypeSupportImpl.cpp: CorbaSeq/DoubleSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/DoubleSeq.idl


GENERATED_DIRTY += CorbaSeq/FloatSeqTypeSupportImpl.h CorbaSeq/FloatSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/FloatSeq.idl" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/FloatSeq.idl" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/FloatSeqTypeSupportImpl.h CorbaSeq/FloatSeqTypeSupportImpl.cpp: CorbaSeq/FloatSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/FloatSeq.idl


GENERATED_DIRTY += CorbaSeq/LongDoubleSeqTypeSupportImpl.h CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongDoubleSeq.idl" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongDoubleSeq.idl" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongDoubleSeqTypeSupportImpl.h CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp: CorbaSeq/LongDoubleSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongDoubleSeq.idl


GENERATED_DIRTY += CorbaSeq/LongLongSeqTypeSupportImpl.h CorbaSeq/LongLongSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongLongSeq.idl" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongLongSeq.idl" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongLongSeqTypeSupportImpl.h CorbaSeq/LongLongSeqTypeSupportImpl.cpp: CorbaSeq/LongLongSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongLongSeq.idl


GENERATED_DIRTY += CorbaSeq/LongSeqTypeSupportImpl.h CorbaSeq/LongSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongSeq.idl" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongSeq.idl" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongSeqTypeSupportImpl.h CorbaSeq/LongSeqTypeSupportImpl.cpp: CorbaSeq/LongSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongSeq.idl


GENERATED_DIRTY += CorbaSeq/OctetSeqTypeSupportImpl.h CorbaSeq/OctetSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/OctetSeq.idl" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/OctetSeq.idl" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/OctetSeqTypeSupportImpl.h CorbaSeq/OctetSeqTypeSupportImpl.cpp: CorbaSeq/OctetSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/OctetSeq.idl


GENERATED_DIRTY += CorbaSeq/ShortSeqTypeSupportImpl.h CorbaSeq/ShortSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ShortSeq.idl" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ShortSeq.idl" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ShortSeqTypeSupportImpl.h CorbaSeq/ShortSeqTypeSupportImpl.cpp: CorbaSeq/ShortSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ShortSeq.idl


GENERATED_DIRTY += CorbaSeq/StringSeqTypeSupportImpl.h CorbaSeq/StringSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/StringSeq.idl" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/StringSeq.idl" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/StringSeqTypeSupportImpl.h CorbaSeq/StringSeqTypeSupportImpl.cpp: CorbaSeq/StringSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/StringSeq.idl


GENERATED_DIRTY += CorbaSeq/ULongLongSeqTypeSupportImpl.h CorbaSeq/ULongLongSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ULongLongSeq.idl" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ULongLongSeq.idl" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ULongLongSeqTypeSupportImpl.h CorbaSeq/ULongLongSeqTypeSupportImpl.cpp: CorbaSeq/ULongLongSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ULongLongSeq.idl


GENERATED_DIRTY += CorbaSeq/ULongSeqTypeSupportImpl.h CorbaSeq/ULongSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ULongSeq.idl" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ULongSeq.idl" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ULongSeqTypeSupportImpl.h CorbaSeq/ULongSeqTypeSupportImpl.cpp: CorbaSeq/ULongSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ULongSeq.idl


GENERATED_DIRTY += CorbaSeq/UShortSeqTypeSupportImpl.h CorbaSeq/UShortSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/UShortSeq.idl" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/UShortSeq.idl" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/UShortSeqTypeSupportImpl.h CorbaSeq/UShortSeqTypeSupportImpl.cpp: CorbaSeq/UShortSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/UShortSeq.idl


GENERATED_DIRTY += CorbaSeq/WCharSeqTypeSupportImpl.h CorbaSeq/WCharSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/WCharSeq.idl" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/WCharSeq.idl" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/WCharSeqTypeSupportImpl.h CorbaSeq/WCharSeqTypeSupportImpl.cpp: CorbaSeq/WCharSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/WCharSeq.idl


GENERATED_DIRTY += CorbaSeq/WStringSeqTypeSupportImpl.h CorbaSeq/WStringSeqTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/WStringSeq.idl" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "CorbaSeq/WStringSeq.idl" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/WStringSeqTypeSupportImpl.h CorbaSeq/WStringSeqTypeSupportImpl.cpp: CorbaSeq/WStringSeq.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,versioning_begin=OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=OPENDDS_END_VERSIONED_NAMESPACE_DECL -Wb,versioning_name=OPENDDS_VERSIONED_NAMESPACE_NAME -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/WStringSeq.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += $(GENERATED_DIRTY)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = DdsDcpsGuidC.cpp DdsDcpsCoreC.cpp DdsDcpsInfoUtilsC.cpp DdsDcpsConditionSeqC.cpp DdsDcpsDataReaderSeqC.cpp DdsSecurityParamsC.cpp DdsSecurityCoreC.cpp DdsDcpsGuidTypeSupportC.cpp DdsDcpsCoreTypeSupportC.cpp DdsDcpsInfrastructureTypeSupportC.cpp DdsDcpsC.cpp DdsDcpsDomainC.cpp DdsDcpsInfrastructureC.cpp DdsDcpsPublicationC.cpp DdsDcpsSubscriptionC.cpp DdsDcpsSubscriptionExtC.cpp DdsDcpsTopicC.cpp DdsDcpsTypeSupportExtC.cpp DdsDcpsGuidTypeSupportImpl.cpp DdsDcpsCoreTypeSupportImpl.cpp DdsDcpsInfrastructureTypeSupportImpl.cpp DdsDcpsInfoUtilsTypeSupportImpl.cpp DdsSecurityParamsTypeSupportImpl.cpp DdsSecurityCoreTypeSupportImpl.cpp CorbaSeq/BooleanSeqTypeSupportImpl.cpp CorbaSeq/CharSeqTypeSupportImpl.cpp CorbaSeq/DoubleSeqTypeSupportImpl.cpp CorbaSeq/FloatSeqTypeSupportImpl.cpp CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp CorbaSeq/LongLongSeqTypeSupportImpl.cpp CorbaSeq/LongSeqTypeSupportImpl.cpp CorbaSeq/OctetSeqTypeSupportImpl.cpp CorbaSeq/ShortSeqTypeSupportImpl.cpp CorbaSeq/StringSeqTypeSupportImpl.cpp CorbaSeq/ULongLongSeqTypeSupportImpl.cpp CorbaSeq/ULongSeqTypeSupportImpl.cpp CorbaSeq/UShortSeqTypeSupportImpl.cpp CorbaSeq/WCharSeqTypeSupportImpl.cpp CorbaSeq/WStringSeqTypeSupportImpl.cpp DCPS/SendStateDataSampleList.cpp DCPS/ConfigUtils.cpp DCPS/ContentFilteredTopicImpl.cpp DCPS/Replayer.cpp DCPS/FilterEvaluator.cpp DCPS/MonitorFactory.cpp DCPS/MultiTopicImpl.cpp DCPS/FileSystemStorage.cpp DCPS/RawDataSample.cpp DCPS/CoherentChangeControl.cpp DCPS/MessageTracker.cpp DCPS/TimeDuration.cpp DCPS/BuiltInTopicUtils.cpp DCPS/TopicImpl.cpp DCPS/GuidBuilder.cpp DCPS/BitPubListenerImpl.cpp DCPS/Marked_Default_Qos.cpp DCPS/StatusConditionImpl.cpp DCPS/WriterInfo.cpp DCPS/GuidUtils.cpp DCPS/ConditionImpl.cpp DCPS/RecorderImpl.cpp DCPS/Discovery.cpp DCPS/GuidConverter.cpp DCPS/ReadConditionImpl.cpp DCPS/LinuxNetworkConfigMonitor.cpp DCPS/OwnershipManager.cpp DCPS/RequestedDeadlineWatchdog.cpp DCPS/DataSampleElement.cpp DCPS/RepoIdBuilder.cpp DCPS/SubscriberImpl.cpp DCPS/QueryConditionImpl.cpp DCPS/EntityImpl.cpp DCPS/WriteDataContainer.cpp DCPS/TopicDescriptionImpl.cpp DCPS/Qos_Helper.cpp DCPS/WaitSet.cpp DCPS/DataReaderImpl.cpp DCPS/SafetyProfilePool.cpp DCPS/MultiTopicDataReaderBase.cpp DCPS/ReactorInterceptor.cpp DCPS/Watchdog.cpp DCPS/WriterDataSampleList.cpp DCPS/DomainParticipantImpl.cpp DCPS/ReceivedDataElementList.cpp DCPS/InstanceState.cpp DCPS/Service_Participant.cpp DCPS/ReplayerImpl.cpp DCPS/DataSampleHeader.cpp DCPS/GroupRakeData.cpp DCPS/debug.cpp DCPS/ReactorTask.cpp DCPS/NetworkConfigMonitor.cpp DCPS/InstanceHandle.cpp DCPS/InstanceDataSampleList.cpp DCPS/GuardCondition.cpp DCPS/TypeSupportImpl.cpp DCPS/RepoIdGenerator.cpp DCPS/OfferedDeadlineWatchdog.cpp DCPS/PublisherImpl.cpp DCPS/StaticDiscovery.cpp DCPS/DisjointSequence.cpp DCPS/MemoryPool.cpp DCPS/DCPS_Utils.cpp DCPS/Serializer.cpp DCPS/ReceivedDataStrategy.cpp DCPS/Transient_Kludge.cpp DCPS/Registered_Data_Types.cpp DCPS/NetworkConfigModifier.cpp DCPS/Time_Helper.cpp DCPS/DomainParticipantFactoryImpl.cpp DCPS/SafetyProfileStreams.cpp DCPS/DataDurabilityCache.cpp DCPS/DataWriterImpl.cpp DCPS/Recorder.cpp DCPS/RepoIdConverter.cpp DCPS/transport/framework/DataLink.cpp DCPS/transport/framework/DirectPriorityMapper.cpp DCPS/transport/framework/TransportHeader.cpp DCPS/transport/framework/RemoveAllVisitor.cpp DCPS/transport/framework/ThreadPerConnectionSendTask.cpp DCPS/transport/framework/TransportImpl.cpp DCPS/transport/framework/DataLinkCleanupTask.cpp DCPS/transport/framework/CopyChainVisitor.cpp DCPS/transport/framework/NullSynchStrategy.cpp DCPS/transport/framework/PoolSynchStrategy.cpp DCPS/transport/framework/ThreadSynchResource.cpp DCPS/transport/framework/ThreadSynchWorker.cpp DCPS/transport/framework/PerConnectionSynch.cpp DCPS/transport/framework/TransportSendBuffer.cpp DCPS/transport/framework/ReceiveListenerSetMap.cpp DCPS/transport/framework/TransportInst.cpp DCPS/transport/framework/NetworkAddress.cpp DCPS/transport/framework/NullSynch.cpp DCPS/transport/framework/ThreadSynch.cpp DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp DCPS/transport/framework/TransportCustomizedElement.cpp DCPS/transport/framework/TransportReplacedElement.cpp DCPS/transport/framework/TransportSendStrategy.cpp DCPS/transport/framework/TransportDebug.cpp DCPS/transport/framework/TransportReassembly.cpp DCPS/transport/framework/TransportSendListener.cpp DCPS/transport/framework/DataLinkSet.cpp DCPS/transport/framework/ReactorSynchStrategy.cpp DCPS/transport/framework/TransportRetainedElement.cpp DCPS/transport/framework/TransportClient.cpp DCPS/transport/framework/ReceivedDataSample.cpp DCPS/transport/framework/PriorityKey.cpp DCPS/transport/framework/ThreadSynchStrategy.cpp DCPS/transport/framework/QueueRemoveVisitor.cpp DCPS/transport/framework/ReactorSynch.cpp DCPS/transport/framework/SendResponseListener.cpp DCPS/transport/framework/TransportType.cpp DCPS/transport/framework/PerConnectionSynchStrategy.cpp DCPS/transport/framework/ScheduleOutputHandler.cpp DCPS/transport/framework/TransportStrategy.cpp DCPS/transport/framework/PoolSynch.cpp DCPS/transport/framework/TransportControlElement.cpp DCPS/transport/framework/TransportRegistry.cpp DCPS/transport/framework/BuildChainVisitor.cpp DCPS/transport/framework/ReceiveListenerSet.cpp DCPS/transport/framework/TransportQueueElement.cpp DCPS/transport/framework/TransportSendControlElement.cpp DCPS/transport/framework/TransportReceiveListener.cpp DCPS/transport/framework/TransportSendElement.cpp DCPS/transport/framework/PacketRemoveVisitor.cpp DCPS/transport/framework/PriorityMapper.cpp DCPS/transport/framework/TransportConfig.cpp DCPS/security/framework/SecurityPluginInst.cpp DCPS/security/framework/SecurityRegistry.cpp DCPS/security/framework/SecurityConfig.cpp  $(ACE_PCH_SOURCE)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsGuidC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsCoreC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsInfoUtilsC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsConditionSeqC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsDataReaderSeqC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsSecurityParamsC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsSecurityCoreC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsGuidTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsCoreTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsInfrastructureTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsDomainC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsInfrastructureC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsPublicationC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsSubscriptionC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsSubscriptionExtC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsTopicC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsTypeSupportExtC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsGuidTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsCoreTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsInfrastructureTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsDcpsInfoUtilsTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsSecurityParamsTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:DdsSecurityCoreTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/BooleanSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/CharSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/DoubleSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/FloatSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/LongLongSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/LongSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/OctetSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/ShortSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/StringSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/ULongLongSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/ULongSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/UShortSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/WCharSeqTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:CorbaSeq/WStringSeqTypeSupportImpl.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE3)_idl.old
	@cp $(IDL_DEPENDENCY_FILE3) $(IDL_DEPENDENCY_FILE3)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE3) \
	$(IDL_DEPS_FLAGS3) -t gnuidl -DMAKEDEPEND $(IDL_DEPS3)
	@if cmp -s $(IDL_DEPENDENCY_FILE3) $(IDL_DEPENDENCY_FILE3)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS3)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS3)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE3)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE4)_idl.old
	@cp $(IDL_DEPENDENCY_FILE4) $(IDL_DEPENDENCY_FILE4)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE4) \
	$(IDL_DEPS_FLAGS4) -t gnuidl -DMAKEDEPEND $(IDL_DEPS4)
	@if cmp -s $(IDL_DEPENDENCY_FILE4) $(IDL_DEPENDENCY_FILE4)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS4)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS4)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE4)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE5)_idl.old
	@cp $(IDL_DEPENDENCY_FILE5) $(IDL_DEPENDENCY_FILE5)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE5) \
	$(IDL_DEPS_FLAGS5) -t gnuidl -DMAKEDEPEND $(IDL_DEPS5)
	@if cmp -s $(IDL_DEPENDENCY_FILE5) $(IDL_DEPENDENCY_FILE5)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS5)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS5)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE5)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE6)_idl.old
	@cp $(IDL_DEPENDENCY_FILE6) $(IDL_DEPENDENCY_FILE6)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE6) \
	$(IDL_DEPS_FLAGS6) -t gnuidl -DMAKEDEPEND $(IDL_DEPS6)
	@if cmp -s $(IDL_DEPENDENCY_FILE6) $(IDL_DEPENDENCY_FILE6)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS6)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS6)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE6)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE7)_idl.old
	@cp $(IDL_DEPENDENCY_FILE7) $(IDL_DEPENDENCY_FILE7)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE7) \
	$(IDL_DEPS_FLAGS7) -t gnuidl -DMAKEDEPEND $(IDL_DEPS7)
	@if cmp -s $(IDL_DEPENDENCY_FILE7) $(IDL_DEPENDENCY_FILE7)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS7)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS7)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE7)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE8)_idl.old
	@cp $(IDL_DEPENDENCY_FILE8) $(IDL_DEPENDENCY_FILE8)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE8) \
	$(IDL_DEPS_FLAGS8) -t gnuidl -DMAKEDEPEND $(IDL_DEPS8)
	@if cmp -s $(IDL_DEPENDENCY_FILE8) $(IDL_DEPENDENCY_FILE8)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS8)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS8)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE8)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE9)_idl.old
	@cp $(IDL_DEPENDENCY_FILE9) $(IDL_DEPENDENCY_FILE9)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE9) \
	$(IDL_DEPS_FLAGS9) -t gnuidl -DMAKEDEPEND $(IDL_DEPS9)
	@if cmp -s $(IDL_DEPENDENCY_FILE9) $(IDL_DEPENDENCY_FILE9)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS9)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS9)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE9)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE10)_idl.old
	@cp $(IDL_DEPENDENCY_FILE10) $(IDL_DEPENDENCY_FILE10)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE10) \
	$(IDL_DEPS_FLAGS10) -t gnuidl -DMAKEDEPEND $(IDL_DEPS10)
	@if cmp -s $(IDL_DEPENDENCY_FILE10) $(IDL_DEPENDENCY_FILE10)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS10)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS10)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE10)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE11)_idl.old
	@cp $(IDL_DEPENDENCY_FILE11) $(IDL_DEPENDENCY_FILE11)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE11) \
	$(IDL_DEPS_FLAGS11) -t gnuidl -DMAKEDEPEND $(IDL_DEPS11)
	@if cmp -s $(IDL_DEPENDENCY_FILE11) $(IDL_DEPENDENCY_FILE11)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS11)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS11)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE11)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE12)_idl.old
	@cp $(IDL_DEPENDENCY_FILE12) $(IDL_DEPENDENCY_FILE12)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE12) \
	$(IDL_DEPS_FLAGS12) -t gnuidl -DMAKEDEPEND $(IDL_DEPS12)
	@if cmp -s $(IDL_DEPENDENCY_FILE12) $(IDL_DEPENDENCY_FILE12)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS12)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS12)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE12)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE13)_idl.old
	@cp $(IDL_DEPENDENCY_FILE13) $(IDL_DEPENDENCY_FILE13)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE13) \
	$(IDL_DEPS_FLAGS13) -t gnuidl -DMAKEDEPEND $(IDL_DEPS13)
	@if cmp -s $(IDL_DEPENDENCY_FILE13) $(IDL_DEPENDENCY_FILE13)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS13)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS13)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE13)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE14)_idl.old
	@cp $(IDL_DEPENDENCY_FILE14) $(IDL_DEPENDENCY_FILE14)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE14) \
	$(IDL_DEPS_FLAGS14) -t gnuidl -DMAKEDEPEND $(IDL_DEPS14)
	@if cmp -s $(IDL_DEPENDENCY_FILE14) $(IDL_DEPENDENCY_FILE14)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS14)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS14)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE14)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE15)_idl.old
	@cp $(IDL_DEPENDENCY_FILE15) $(IDL_DEPENDENCY_FILE15)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE15) \
	$(IDL_DEPS_FLAGS15) -t gnuidl -DMAKEDEPEND $(IDL_DEPS15)
	@if cmp -s $(IDL_DEPENDENCY_FILE15) $(IDL_DEPENDENCY_FILE15)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS15)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS15)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE15)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE16)_idl.old
	@cp $(IDL_DEPENDENCY_FILE16) $(IDL_DEPENDENCY_FILE16)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE16) \
	$(IDL_DEPS_FLAGS16) -t gnuidl -DMAKEDEPEND $(IDL_DEPS16)
	@if cmp -s $(IDL_DEPENDENCY_FILE16) $(IDL_DEPENDENCY_FILE16)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS16)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS16)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE16)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE17)_idl.old
	@cp $(IDL_DEPENDENCY_FILE17) $(IDL_DEPENDENCY_FILE17)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE17) \
	$(IDL_DEPS_FLAGS17) -t gnuidl -DMAKEDEPEND $(IDL_DEPS17)
	@if cmp -s $(IDL_DEPENDENCY_FILE17) $(IDL_DEPENDENCY_FILE17)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS17)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS17)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE17)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE18)_idl.old
	@cp $(IDL_DEPENDENCY_FILE18) $(IDL_DEPENDENCY_FILE18)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE18) \
	$(IDL_DEPS_FLAGS18) -t gnuidl -DMAKEDEPEND $(IDL_DEPS18)
	@if cmp -s $(IDL_DEPENDENCY_FILE18) $(IDL_DEPENDENCY_FILE18)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS18)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS18)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE18)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = installdata_files
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	echo export DDS_ROOT=$(INSTALL_PREFIX)/share/dds> $(DESTDIR)$(INSTALL_PREFIX)/share/dds/dds-devel.sh
	@$(MKDIR) $(DESTDIR)$(INSTALL_PREFIX)/share/dds/dds
	ln -sf $(INSTALL_PREFIX)/include/dds/Version.h $(DESTDIR)$(INSTALL_PREFIX)/share/dds/dds
	cp $(DDS_ROOT)/user_macros.GNU $(DESTDIR)$(INSTALL_PREFIX)/share/dds $(ACE_NUL_STDERR)
	@$(MKDIR) $(DESTDIR)$(INSTALL_PREFIX)/$(INSTALL_LIB)/cmake/OpenDDS
	cp $(DDS_ROOT)/cmake/*.cmake $(DESTDIR)$(INSTALL_PREFIX)/$(INSTALL_LIB)/cmake/OpenDDS
	echo 'set(OPENDDS_USE_PREFIX_PATH ON) # from make install' >> $(DESTDIR)$(INSTALL_PREFIX)/$(INSTALL_LIB)/cmake/OpenDDS/config.cmake

endif
endif
endif

#BEGIN MPC-Generated Install Info
#installdata_files:
#../MPC .
#../AUTHORS .
#../README.md .
#../VERSION.txt .
#../LICENSE .
#../NEWS.md .
#../rules.dds.GNU .
#
#typesupport_files:
#DdsDcpsGuid.idl
#DdsDcpsCore.idl
#DdsDcpsInfrastructure.idl
#DdsDcpsInfoUtils.idl
#DdsSecurityParams.idl
#DdsSecurityCore.idl
#CorbaSeq/BooleanSeq.idl CorbaSeq
#CorbaSeq/CharSeq.idl CorbaSeq
#CorbaSeq/DoubleSeq.idl CorbaSeq
#CorbaSeq/FloatSeq.idl CorbaSeq
#CorbaSeq/LongDoubleSeq.idl CorbaSeq
#CorbaSeq/LongLongSeq.idl CorbaSeq
#CorbaSeq/LongSeq.idl CorbaSeq
#CorbaSeq/OctetSeq.idl CorbaSeq
#CorbaSeq/ShortSeq.idl CorbaSeq
#CorbaSeq/StringSeq.idl CorbaSeq
#CorbaSeq/ULongLongSeq.idl CorbaSeq
#CorbaSeq/ULongSeq.idl CorbaSeq
#CorbaSeq/UShortSeq.idl CorbaSeq
#CorbaSeq/WCharSeq.idl CorbaSeq
#CorbaSeq/WStringSeq.idl CorbaSeq
#
#template_files:
#DCPS/DataCollector_T.cpp
#DCPS/TimePoint_T.cpp
#DCPS/ZeroCopyAllocator_T.cpp
#DCPS/MultiTopicDataReader_T.cpp
#DCPS/RakeResults_T.cpp
#DCPS/ZeroCopySeq_T.cpp
#DCPS/transport/framework/TransportReceiveStrategy_T.cpp
#
#resource_files:
#OpenDDS_DCPS.rc
#
#build_files:
#DdsDcps.mpc
#dcps_optional_safety.mpb
#
#idl_files:
#DdsDcpsGuid.idl
#DdsDcpsCore.idl
#DdsDcpsInfoUtils.idl
#DdsDcpsConditionSeq.idl
#DdsDcpsDataReaderSeq.idl
#DdsSecurityParams.idl
#DdsSecurityCore.idl
#DdsDcpsGuidTypeSupport.idl
#DdsDcpsCoreTypeSupport.idl
#DdsDcpsInfrastructureTypeSupport.idl
#DdsDcps.idl
#DdsDcpsDomain.idl
#DdsDcpsInfrastructure.idl
#DdsDcpsPublication.idl
#DdsDcpsSubscription.idl
#DdsDcpsSubscriptionExt.idl
#DdsDcpsTopic.idl
#DdsDcpsTypeSupportExt.idl
#
#inline_files:
#DCPS/transport/framework/TransportRetainedElement.inl
#DCPS/transport/framework/NullSynch.inl
#DCPS/transport/framework/TransportSendStrategy.inl
#DCPS/transport/framework/TransportReplacedElement.inl
#DCPS/transport/framework/QueueRemoveVisitor.inl
#DCPS/transport/framework/CopyChainVisitor.inl
#DCPS/DataCollector_T.inl
#DCPS/TimePoint_T.inl
#DCPS/transport/framework/PriorityKey.inl
#DCPS/transport/framework/TransportSendElement.inl
#DCPS/transport/framework/TransportControlElement.inl
#DCPS/InstanceState.inl
#DCPS/RepoIdBuilder.inl
#DCPS/transport/framework/PoolSynch.inl
#DdsDcpsTypeSupportExtC.inl
#DCPS/DisjointSequence.inl
#DCPS/transport/framework/PriorityMapper.inl
#DCPS/SendStateDataSampleList.inl
#DCPS/transport/framework/ThreadSynchWorker.inl
#DCPS/transport/framework/TransportSendBuffer.inl
#DdsDcpsTopicC.inl
#DCPS/Serializer.inl
#DCPS/Service_Participant.inl
#DCPS/transport/framework/ReactorSynchStrategy.inl
#DdsSecurityParamsC.inl
#DCPS/ReceivedDataElementList.inl
#DCPS/transport/framework/TransportQueueElement.inl
#DCPS/transport/framework/NetworkAddress.inl
#DCPS/transport/framework/TransportImpl.inl
#DdsSecurityCoreC.inl
#DCPS/DataReaderImpl.inl
#DCPS/transport/framework/ThreadSynch.inl
#DCPS/TimeDuration.inl
#DCPS/transport/framework/RemoveAllVisitor.inl
#DCPS/transport/framework/PerConnectionSynchStrategy.inl
#DCPS/CoherentChangeControl.inl
#DCPS/transport/framework/ThreadSynchResource.inl
#DdsDcpsGuidC.inl
#DCPS/Qos_Helper.inl
#DCPS/transport/framework/ReceivedDataSample.inl
#DdsDcpsInfoUtilsC.inl
#DdsDcpsCoreC.inl
#DdsDcpsGuidTypeSupportC.inl
#DdsDcpsDomainC.inl
#DCPS/DataSampleElement.inl
#DCPS/transport/framework/ScheduleOutputHandler.inl
#DCPS/transport/framework/DataLink.inl
#DdsDcpsInfrastructureTypeSupportC.inl
#DdsDcpsConditionSeqC.inl
#DCPS/transport/framework/BuildChainVisitor.inl
#DCPS/ReactorTask.inl
#DdsDcpsSubscriptionC.inl
#DCPS/transport/framework/TransportRegistry.inl
#DdsDcpsCoreTypeSupportC.inl
#DdsDcpsC.inl
#DCPS/InstanceDataSampleList.inl
#DCPS/DataSampleHeader.inl
#DCPS/transport/framework/PacketRemoveVisitor.inl
#DCPS/GuidBuilder.inl
#DCPS/transport/framework/DirectPriorityMapper.inl
#DCPS/Time_Helper.inl
#DCPS/transport/framework/TransportReceiveStrategy_T.inl
#DCPS/transport/framework/TransportHeader.inl
#DCPS/Transient_Kludge.inl
#DCPS/transport/framework/ReceiveListenerSetMap.inl
#DCPS/transport/framework/ReceiveListenerSet.inl
#DCPS/transport/framework/TransportSendControlElement.inl
#DCPS/transport/framework/DataLinkSet.inl
#DdsDcpsPublicationC.inl
#DCPS/WriterDataSampleList.inl
#DCPS/ZeroCopySeq_T.inl
#DCPS/transport/framework/PoolSynchStrategy.inl
#DdsDcpsDataReaderSeqC.inl
#DCPS/transport/framework/PerConnectionSynch.inl
#DCPS/transport/framework/ThreadPerConRemoveVisitor.inl
#DCPS/transport/framework/TransportCustomizedElement.inl
#DdsDcpsSubscriptionExtC.inl
#DCPS/ZeroCopyAllocator_T.inl
#DCPS/transport/framework/ThreadSynchStrategy.inl
#DCPS/transport/framework/TransportInst.inl
#DdsDcpsInfrastructureC.inl
#DCPS/transport/framework/ReactorSynch.inl
#
#header_files:
#DdsDcpsConditionSeqS.h
#DdsDcpsCoreS.h
#DdsDcpsDataReaderSeqS.h
#DdsDcpsGuidTypeSupportS.h
#DdsDcpsCoreTypeSupportS.h
#DdsDcpsInfrastructureTypeSupportS.h
#Version.h
#Versioned_Namespace.h
#DCPS/MultiTopicImpl.h
#DCPS/DiscoveryBase.h
#DCPS/Qos_Helper.h
#DCPS/Transient_Kludge.h
#DCPS/OfferedDeadlineWatchdog.h
#DCPS/ReceivedDataStrategy.h
#DCPS/WaitSet.h
#DCPS/RawDataSample.h
#DCPS/DataReaderImpl.h
#DCPS/RequestedDeadlineWatchdog.h
#DCPS/DurabilityArray.h
#DCPS/Watchdog.h
#DCPS/ReplayerImpl.h
#DCPS/RepoIdGenerator.h
#DCPS/SafetyProfilePool.h
#DCPS/TimePoint_T.h
#DCPS/MonitorFactory.h
#DCPS/InstanceDataSampleList.h
#DCPS/SendStateDataSampleList.h
#DCPS/Discovery.h
#DCPS/ZeroCopyInfoSeq_T.h
#DCPS/MessageTracker.h
#DCPS/RcEventHandler.h
#DCPS/debug.h
#DCPS/GuardCondition.h
#DCPS/ZeroCopySeqBase.h
#DCPS/ReactorTask.h
#DCPS/PublicationInstance.h
#DCPS/LocalObject.h
#DCPS/ZeroCopyAllocator_T.h
#DCPS/DomainParticipantFactoryImpl.h
#DCPS/RepoIdBuilder.h
#DCPS/LinuxNetworkConfigMonitor.h
#DCPS/ReadConditionImpl.h
#DCPS/RepoIdTypes.h
#DCPS/TimeTypes.h
#DCPS/RakeResults_T.h
#DCPS/TopicImpl.h
#DCPS/WriterInfo.h
#DCPS/FilterEvaluator.h
#DCPS/ReactorInterceptor.h
#DCPS/DurabilityQueue.h
#DCPS/AssociationData.h
#DCPS/ZeroCopySeq_T.h
#DCPS/Comparator_T.h
#DCPS/DomainParticipantImpl.h
#DCPS/SubscriptionInstance.h
#DCPS/ContentFilteredTopicImpl.h
#DCPS/DataReaderImpl_T.h
#DCPS/TopicCallbacks.h
#DCPS/JobQueue.h
#DCPS/NetworkConfigMonitor.h
#DCPS/AstNodeWrapper.h
#DCPS/SafetyProfileStreams.h
#DCPS/SafetyProfileSequenceVar.h
#DCPS/Service_Participant.h
#DCPS/TopicDescriptionImpl.h
#DCPS/RakeData.h
#DCPS/SequenceIterator.h
#DCPS/RemoveAssociationSweeper.h
#DCPS/Stats_T.h
#DCPS/PoolAllocator.h
#DCPS/NetworkConfigModifier.h
#DCPS/QueryConditionImpl.h
#DCPS/DisjointSequence.h
#DCPS/SequenceNumber.h
#DCPS/StatusConditionImpl.h
#DCPS/GuidUtils.h
#DCPS/Recorder.h
#DCPS/GroupRakeData.h
#DCPS/Replayer.h
#DCPS/RepoIdConverter.h
#DCPS/dcps_export.h
#DCPS/EntityImpl.h
#DCPS/WriteDataContainer.h
#DCPS/Serializer.h
#DCPS/Registered_Data_Types.h
#DCPS/InstanceState.h
#DCPS/BitPubListenerImpl.h
#DCPS/PoolAllocationBase.h
#DCPS/TypeSupportImpl.h
#DCPS/InstanceHandle.h
#DCPS/Dynamic_Cached_Allocator_With_Overflow_T.h
#DCPS/V8TypeConverter.h
#DCPS/DiscoveryListener.h
#DCPS/DataCollector_T.h
#DCPS/ReactorTask_rch.h
#DCPS/PeriodicTask.h
#DCPS/Ice.h
#DCPS/FilterExpressionGrammar.h
#DCPS/MultiTopicDataReader_T.h
#DCPS/RestoreOutputStreamState.h
#DCPS/SubscriberImpl.h
#DCPS/RecorderImpl.h
#DCPS/unique_ptr.h
#DCPS/ReceivedDataElementList.h
#DCPS/DataReaderCallbacks.h
#DCPS/Util.h
#DCPS/RcHandle_T.h
#DCPS/Cached_Allocator_With_Overflow_T.h
#DCPS/DataDurabilityCache.h
#DCPS/PublisherImpl.h
#DCPS/StaticDiscovery.h
#DCPS/FeatureDisabledQosCheck.h
#DCPS/DataSampleHeader.h
#DCPS/ConfigUtils.h
#DCPS/OwnershipManager.h
#DCPS/MemoryPool.h
#DCPS/DataWriterCallbacks.h
#DCPS/BuiltInTopicUtils.h
#DCPS/DCPS_Utils.h
#DCPS/Marked_Default_Qos.h
#DCPS/DataBlockLockPool.h
#DCPS/GuidConverter.h
#DCPS/TopicDetails.h
#DCPS/DataWriterImpl_T.h
#DCPS/SafetyProfileSequence.h
#DCPS/Message_Block_Ptr.h
#DCPS/TimeDuration.h
#DCPS/StaticIncludes.h
#DCPS/GuidBuilder.h
#DCPS/FileSystemStorage.h
#DCPS/DataWriterImpl.h
#DCPS/Definitions.h
#DCPS/Time_Helper.h
#DCPS/RapidJsonTypeConverter.h
#DCPS/MultiTopicDataReaderBase.h
#DCPS/CoherentChangeControl.h
#DCPS/WriterDataSampleList.h
#DCPS/ConditionImpl.h
#DCPS/DataSampleElement.h
#DCPS/RcObject.h
#DCPS/SporadicTask.h
#DCPS/TopicExpressionGrammar.h
#DCPS/transport/framework/PoolSynch.h
#DCPS/transport/framework/PoolSynchStrategy.h
#DCPS/transport/framework/TransportType_rch.h
#DCPS/transport/framework/BasicQueue_T.h
#DCPS/transport/framework/ThreadSynchStrategy_rch.h
#DCPS/transport/framework/QueueTaskBase_T.h
#DCPS/transport/framework/PriorityMapper.h
#DCPS/transport/framework/TransportDebug.h
#DCPS/transport/framework/ThreadSynchWorker.h
#DCPS/transport/framework/ThreadPerConnectionSendTask.h
#DCPS/transport/framework/TransportRegistry.h
#DCPS/transport/framework/TransportReassembly.h
#DCPS/transport/framework/ReceivedDataSample.h
#DCPS/transport/framework/TransportImpl_rch.h
#DCPS/transport/framework/TransportStrategy.h
#DCPS/transport/framework/RemoveAllVisitor.h
#DCPS/transport/framework/DataLinkCleanupTask.h
#DCPS/transport/framework/TransportCustomizedElement.h
#DCPS/transport/framework/TransportHeader.h
#DCPS/transport/framework/DataLink_rch.h
#DCPS/transport/framework/TransportReplacedElement.h
#DCPS/transport/framework/TransportConfig.h
#DCPS/transport/framework/ScheduleOutputHandler.h
#DCPS/transport/framework/TransportSendStrategy.h
#DCPS/transport/framework/TransportConfig_rch.h
#DCPS/transport/framework/TransportQueueElement.h
#DCPS/transport/framework/ReceiveListenerSetMap.h
#DCPS/transport/framework/NetworkAddress.h
#DCPS/transport/framework/ThreadSynchStrategy.h
#DCPS/transport/framework/TransportSendListener.h
#DCPS/transport/framework/TransportSendBuffer.h
#DCPS/transport/framework/TransportExceptions.h
#DCPS/transport/framework/TransportInst.h
#DCPS/transport/framework/TransportSendControlElement.h
#DCPS/transport/framework/TransportType.h
#DCPS/transport/framework/ReactorSynchStrategy.h
#DCPS/transport/framework/TransportControlElement.h
#DCPS/transport/framework/TransportDefs.h
#DCPS/transport/framework/QueueRemoveVisitor.h
#DCPS/transport/framework/ReceiveListenerSet.h
#DCPS/transport/framework/TransportClient.h
#DCPS/transport/framework/TransportStrategy_rch.h
#DCPS/transport/framework/NullSynch.h
#DCPS/transport/framework/TransportSendStrategy_rch.h
#DCPS/transport/framework/DataLink.h
#DCPS/transport/framework/TransportInst_rch.h
#DCPS/transport/framework/ReactorSynch.h
#DCPS/transport/framework/PerConnectionSynchStrategy.h
#DCPS/transport/framework/PerConnectionSynch.h
#DCPS/transport/framework/CopyChainVisitor.h
#DCPS/transport/framework/SendResponseListener.h
#DCPS/transport/framework/DataLinkSet_rch.h
#DCPS/transport/framework/TransportRetainedElement.h
#DCPS/transport/framework/ThreadPerConRemoveVisitor.h
#DCPS/transport/framework/BuildChainVisitor.h
#DCPS/transport/framework/DirectPriorityMapper.h
#DCPS/transport/framework/TransportReceiveListener.h
#DCPS/transport/framework/DataLinkSet.h
#DCPS/transport/framework/TransportImpl.h
#DCPS/transport/framework/ThreadSynch.h
#DCPS/transport/framework/PriorityKey.h
#DCPS/transport/framework/TransportReceiveStrategy_T.h
#DCPS/transport/framework/EntryExit.h
#DCPS/transport/framework/TransportSendElement.h
#DCPS/transport/framework/PacketRemoveVisitor.h
#DCPS/transport/framework/ThreadSynchResource.h
#DCPS/transport/framework/BasicQueueVisitor_T.h
#DCPS/transport/framework/TransportReceiveStrategy_rch.h
#DCPS/transport/framework/NullSynchStrategy.h
#DCPS/transport/framework/ReceiveListenerSet_rch.h
#DCPS/transport/framework/DataLinkWatchdog_T.h
#DCPS/security/framework/SecurityConfigPropertyList.h
#DCPS/security/framework/SecurityPluginInst.h
#DCPS/security/framework/SecurityRegistry.h
#DCPS/security/framework/SecurityConfig.h
#DCPS/security/framework/SecurityConfig_rch.h
#DCPS/security/framework/SecurityPluginInst_rch.h
#DCPS/security/framework/Properties.h
#DCPS/yard/yard_tree.hpp
#DCPS/yard/yard_char_set.hpp
#DCPS/yard/yard_text_grammar.hpp
#DCPS/yard/yard_base_grammar.hpp
#DCPS/yard/yard_parser.hpp
#DdsDcpsS.h
#DdsDcpsDomainS.h
#DdsDcpsGuidS.h
#DdsDcpsInfoUtilsS.h
#DdsDcpsInfrastructureS.h
#DdsDcpsPublicationS.h
#DdsDcpsSubscriptionS.h
#DdsDcpsSubscriptionExtS.h
#DdsDcpsTopicS.h
#DdsDcpsTypeSupportExtS.h
#DdsDcpsCoreTypeSupportImpl.h
#DdsDcpsGuidTypeSupportImpl.h
#CorbaSeq/FloatSeqTypeSupportImpl.h
#CorbaSeq/ULongSeqTypeSupportImpl.h
#DdsDcpsInfoUtilsTypeSupportImpl.h
#CorbaSeq/LongLongSeqTypeSupportImpl.h
#DdsDcpsTypeSupportExtC.h
#CorbaSeq/DoubleSeqTypeSupportImpl.h
#DdsDcpsTopicC.h
#CorbaSeq/UShortSeqTypeSupportImpl.h
#DdsDcpsInfrastructureTypeSupportImpl.h
#DdsSecurityParamsC.h
#CorbaSeq/LongDoubleSeqTypeSupportImpl.h
#DdsSecurityCoreC.h
#DdsSecurityParamsTypeSupportImpl.h
#CorbaSeq/ULongLongSeqTypeSupportImpl.h
#CorbaSeq/WCharSeqTypeSupportImpl.h
#DdsDcpsGuidC.h
#CorbaSeq/BooleanSeqTypeSupportImpl.h
#CorbaSeq/LongSeqTypeSupportImpl.h
#DdsDcpsInfoUtilsC.h
#DdsDcpsCoreC.h
#DdsDcpsGuidTypeSupportC.h
#DdsDcpsDomainC.h
#DdsSecurityCoreTypeSupportImpl.h
#DdsDcpsInfrastructureTypeSupportC.h
#DdsDcpsConditionSeqC.h
#DdsDcpsSubscriptionC.h
#DdsDcpsCoreTypeSupportC.h
#DdsDcpsC.h
#CorbaSeq/OctetSeqTypeSupportImpl.h
#CorbaSeq/ShortSeqTypeSupportImpl.h
#DdsDcpsPublicationC.h
#CorbaSeq/StringSeqTypeSupportImpl.h
#DdsDcpsDataReaderSeqC.h
#CorbaSeq/WStringSeqTypeSupportImpl.h
#DdsDcpsSubscriptionExtC.h
#CorbaSeq/CharSeqTypeSupportImpl.h
#DdsDcpsInfrastructureC.h
#
#source_files:
#DdsDcpsGuidC.cpp
#DdsDcpsCoreC.cpp
#DdsDcpsInfoUtilsC.cpp
#DdsDcpsConditionSeqC.cpp
#DdsDcpsDataReaderSeqC.cpp
#DdsSecurityParamsC.cpp
#DdsSecurityCoreC.cpp
#DdsDcpsGuidTypeSupportC.cpp
#DdsDcpsCoreTypeSupportC.cpp
#DdsDcpsInfrastructureTypeSupportC.cpp
#DdsDcpsC.cpp
#DdsDcpsDomainC.cpp
#DdsDcpsInfrastructureC.cpp
#DdsDcpsPublicationC.cpp
#DdsDcpsSubscriptionC.cpp
#DdsDcpsSubscriptionExtC.cpp
#DdsDcpsTopicC.cpp
#DdsDcpsTypeSupportExtC.cpp
#DdsDcpsGuidTypeSupportImpl.cpp
#DdsDcpsCoreTypeSupportImpl.cpp
#DdsDcpsInfrastructureTypeSupportImpl.cpp
#DdsDcpsInfoUtilsTypeSupportImpl.cpp
#DdsSecurityParamsTypeSupportImpl.cpp
#DdsSecurityCoreTypeSupportImpl.cpp
#CorbaSeq/BooleanSeqTypeSupportImpl.cpp
#CorbaSeq/CharSeqTypeSupportImpl.cpp
#CorbaSeq/DoubleSeqTypeSupportImpl.cpp
#CorbaSeq/FloatSeqTypeSupportImpl.cpp
#CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp
#CorbaSeq/LongLongSeqTypeSupportImpl.cpp
#CorbaSeq/LongSeqTypeSupportImpl.cpp
#CorbaSeq/OctetSeqTypeSupportImpl.cpp
#CorbaSeq/ShortSeqTypeSupportImpl.cpp
#CorbaSeq/StringSeqTypeSupportImpl.cpp
#CorbaSeq/ULongLongSeqTypeSupportImpl.cpp
#CorbaSeq/ULongSeqTypeSupportImpl.cpp
#CorbaSeq/UShortSeqTypeSupportImpl.cpp
#CorbaSeq/WCharSeqTypeSupportImpl.cpp
#CorbaSeq/WStringSeqTypeSupportImpl.cpp
#DCPS/SendStateDataSampleList.cpp
#DCPS/ConfigUtils.cpp
#DCPS/ContentFilteredTopicImpl.cpp
#DCPS/Replayer.cpp
#DCPS/FilterEvaluator.cpp
#DCPS/MonitorFactory.cpp
#DCPS/MultiTopicImpl.cpp
#DCPS/FileSystemStorage.cpp
#DCPS/RawDataSample.cpp
#DCPS/CoherentChangeControl.cpp
#DCPS/MessageTracker.cpp
#DCPS/TimeDuration.cpp
#DCPS/BuiltInTopicUtils.cpp
#DCPS/TopicImpl.cpp
#DCPS/GuidBuilder.cpp
#DCPS/BitPubListenerImpl.cpp
#DCPS/Marked_Default_Qos.cpp
#DCPS/StatusConditionImpl.cpp
#DCPS/WriterInfo.cpp
#DCPS/GuidUtils.cpp
#DCPS/ConditionImpl.cpp
#DCPS/RecorderImpl.cpp
#DCPS/Discovery.cpp
#DCPS/GuidConverter.cpp
#DCPS/ReadConditionImpl.cpp
#DCPS/LinuxNetworkConfigMonitor.cpp
#DCPS/OwnershipManager.cpp
#DCPS/RequestedDeadlineWatchdog.cpp
#DCPS/DataSampleElement.cpp
#DCPS/RepoIdBuilder.cpp
#DCPS/SubscriberImpl.cpp
#DCPS/QueryConditionImpl.cpp
#DCPS/EntityImpl.cpp
#DCPS/WriteDataContainer.cpp
#DCPS/TopicDescriptionImpl.cpp
#DCPS/Qos_Helper.cpp
#DCPS/WaitSet.cpp
#DCPS/DataReaderImpl.cpp
#DCPS/SafetyProfilePool.cpp
#DCPS/MultiTopicDataReaderBase.cpp
#DCPS/ReactorInterceptor.cpp
#DCPS/Watchdog.cpp
#DCPS/WriterDataSampleList.cpp
#DCPS/DomainParticipantImpl.cpp
#DCPS/ReceivedDataElementList.cpp
#DCPS/InstanceState.cpp
#DCPS/Service_Participant.cpp
#DCPS/ReplayerImpl.cpp
#DCPS/DataSampleHeader.cpp
#DCPS/GroupRakeData.cpp
#DCPS/debug.cpp
#DCPS/ReactorTask.cpp
#DCPS/NetworkConfigMonitor.cpp
#DCPS/InstanceHandle.cpp
#DCPS/InstanceDataSampleList.cpp
#DCPS/GuardCondition.cpp
#DCPS/TypeSupportImpl.cpp
#DCPS/RepoIdGenerator.cpp
#DCPS/OfferedDeadlineWatchdog.cpp
#DCPS/PublisherImpl.cpp
#DCPS/StaticDiscovery.cpp
#DCPS/DisjointSequence.cpp
#DCPS/MemoryPool.cpp
#DCPS/DCPS_Utils.cpp
#DCPS/Serializer.cpp
#DCPS/ReceivedDataStrategy.cpp
#DCPS/Transient_Kludge.cpp
#DCPS/Registered_Data_Types.cpp
#DCPS/NetworkConfigModifier.cpp
#DCPS/Time_Helper.cpp
#DCPS/DomainParticipantFactoryImpl.cpp
#DCPS/SafetyProfileStreams.cpp
#DCPS/DataDurabilityCache.cpp
#DCPS/DataWriterImpl.cpp
#DCPS/Recorder.cpp
#DCPS/RepoIdConverter.cpp
#DCPS/transport/framework/DataLink.cpp
#DCPS/transport/framework/DirectPriorityMapper.cpp
#DCPS/transport/framework/TransportHeader.cpp
#DCPS/transport/framework/RemoveAllVisitor.cpp
#DCPS/transport/framework/ThreadPerConnectionSendTask.cpp
#DCPS/transport/framework/TransportImpl.cpp
#DCPS/transport/framework/DataLinkCleanupTask.cpp
#DCPS/transport/framework/CopyChainVisitor.cpp
#DCPS/transport/framework/NullSynchStrategy.cpp
#DCPS/transport/framework/PoolSynchStrategy.cpp
#DCPS/transport/framework/ThreadSynchResource.cpp
#DCPS/transport/framework/ThreadSynchWorker.cpp
#DCPS/transport/framework/PerConnectionSynch.cpp
#DCPS/transport/framework/TransportSendBuffer.cpp
#DCPS/transport/framework/ReceiveListenerSetMap.cpp
#DCPS/transport/framework/TransportInst.cpp
#DCPS/transport/framework/NetworkAddress.cpp
#DCPS/transport/framework/NullSynch.cpp
#DCPS/transport/framework/ThreadSynch.cpp
#DCPS/transport/framework/ThreadPerConRemoveVisitor.cpp
#DCPS/transport/framework/TransportCustomizedElement.cpp
#DCPS/transport/framework/TransportReplacedElement.cpp
#DCPS/transport/framework/TransportSendStrategy.cpp
#DCPS/transport/framework/TransportDebug.cpp
#DCPS/transport/framework/TransportReassembly.cpp
#DCPS/transport/framework/TransportSendListener.cpp
#DCPS/transport/framework/DataLinkSet.cpp
#DCPS/transport/framework/ReactorSynchStrategy.cpp
#DCPS/transport/framework/TransportRetainedElement.cpp
#DCPS/transport/framework/TransportClient.cpp
#DCPS/transport/framework/ReceivedDataSample.cpp
#DCPS/transport/framework/PriorityKey.cpp
#DCPS/transport/framework/ThreadSynchStrategy.cpp
#DCPS/transport/framework/QueueRemoveVisitor.cpp
#DCPS/transport/framework/ReactorSynch.cpp
#DCPS/transport/framework/SendResponseListener.cpp
#DCPS/transport/framework/TransportType.cpp
#DCPS/transport/framework/PerConnectionSynchStrategy.cpp
#DCPS/transport/framework/ScheduleOutputHandler.cpp
#DCPS/transport/framework/TransportStrategy.cpp
#DCPS/transport/framework/PoolSynch.cpp
#DCPS/transport/framework/TransportControlElement.cpp
#DCPS/transport/framework/TransportRegistry.cpp
#DCPS/transport/framework/BuildChainVisitor.cpp
#DCPS/transport/framework/ReceiveListenerSet.cpp
#DCPS/transport/framework/TransportQueueElement.cpp
#DCPS/transport/framework/TransportSendControlElement.cpp
#DCPS/transport/framework/TransportReceiveListener.cpp
#DCPS/transport/framework/TransportSendElement.cpp
#DCPS/transport/framework/PacketRemoveVisitor.cpp
#DCPS/transport/framework/PriorityMapper.cpp
#DCPS/transport/framework/TransportConfig.cpp
#DCPS/security/framework/SecurityPluginInst.cpp
#DCPS/security/framework/SecurityRegistry.cpp
#DCPS/security/framework/SecurityConfig.cpp
#
#lib_output:
#../lib OpenDDS_Dcps

#END MPC-Generated Install Info

idl_stubs: $(foreach f,$(wildcard CorbaSeq/*.idl),$(f:.idl=TypeSupportImpl.h))

