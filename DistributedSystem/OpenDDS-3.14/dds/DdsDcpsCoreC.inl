// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p17
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<DDS::BuiltinTopicKeyValue_forany>::free (
    DDS::BuiltinTopicKeyValue_slice * _tao_slice
  )
{
  DDS::BuiltinTopicKeyValue_free (_tao_slice);
}

ACE_INLINE
DDS::BuiltinTopicKeyValue_slice *
TAO::Array_Traits<DDS::BuiltinTopicKeyValue_forany>::dup (
    const DDS::BuiltinTopicKeyValue_slice * _tao_slice
  )
{
  return DDS::BuiltinTopicKeyValue_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<DDS::BuiltinTopicKeyValue_forany>::copy (
    DDS::BuiltinTopicKeyValue_slice * _tao_to,
    const DDS::BuiltinTopicKeyValue_slice * _tao_from
  )
{
  DDS::BuiltinTopicKeyValue_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<DDS::BuiltinTopicKeyValue_forany>::zero (
    DDS::BuiltinTopicKeyValue_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
DDS::BuiltinTopicKeyValue_slice *
TAO::Array_Traits<DDS::BuiltinTopicKeyValue_forany>::alloc (void)
{
  return DDS::BuiltinTopicKeyValue_alloc ();
}


// TAO_IDL - Generated from
// be/be_visitor_array/array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<OpenDDS::DCPS::OctetGuidArray16_forany>::free (
    OpenDDS::DCPS::OctetGuidArray16_slice * _tao_slice
  )
{
  OpenDDS::DCPS::OctetGuidArray16_free (_tao_slice);
}

ACE_INLINE
OpenDDS::DCPS::OctetGuidArray16_slice *
TAO::Array_Traits<OpenDDS::DCPS::OctetGuidArray16_forany>::dup (
    const OpenDDS::DCPS::OctetGuidArray16_slice * _tao_slice
  )
{
  return OpenDDS::DCPS::OctetGuidArray16_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<OpenDDS::DCPS::OctetGuidArray16_forany>::copy (
    OpenDDS::DCPS::OctetGuidArray16_slice * _tao_to,
    const OpenDDS::DCPS::OctetGuidArray16_slice * _tao_from
  )
{
  OpenDDS::DCPS::OctetGuidArray16_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<OpenDDS::DCPS::OctetGuidArray16_forany>::zero (
    OpenDDS::DCPS::OctetGuidArray16_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 16; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Octet ();
    }
}

ACE_INLINE
OpenDDS::DCPS::OctetGuidArray16_slice *
TAO::Array_Traits<OpenDDS::DCPS::OctetGuidArray16_forany>::alloc (void)
{
  return OpenDDS::DCPS::OctetGuidArray16_alloc ();
}



OPENDDS_END_VERSIONED_NAMESPACE_DECL


